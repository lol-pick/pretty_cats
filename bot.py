import config
import logging

from cat import Cats

from aiogram import Bot, Dispatcher, executor, types
import aiogram.utils.markdown as fmt
from aiogram.types import (
    ReplyKeyboardRemove,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)

button_agree = KeyboardButton("–î–∞üê±!")
button_dis = KeyboardButton("–ù–µ—Ç, —è —Å–æ–±–∞–∫–∞üê∂")

button_agree_1 = KeyboardButton("–î–∞!")
button_dis_2 = KeyboardButton("–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ")

greet_kb = ReplyKeyboardMarkup(resize_keyboard=True).add(button_agree).add(button_dis)
greet_kb_1 = (
    ReplyKeyboardMarkup(resize_keyboard=True).add(button_agree_1).add(button_dis_2)
)

logging.basicConfig(level=logging.INFO)

bot = Bot(token=config.TOKEN)
dp = Dispatcher(bot)


@dp.message_handler(commands=["subscribe"])
async def subscribe(msg: types.Message):
    await msg.answer("–ù–∞–∂–º–∏—Ç–µ: /start, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ —è —É–º–µ—é :)")


@dp.message_handler(commands=["start"])
async def start(msg: types.Message):
    await msg.answer(
        """–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–º–Ω–æ–≥–æ –∑–Ω–∞–µ—Ç –æ –∫–æ—Ç–∏–∫–∞—Öüê±. –•–æ—á–µ—à—å —Ä–∞—Å—Å–∫–∞–∂—É –æ–Ω –Ω–∏—Ö –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ??!""",
        reply_markup=greet_kb,
    )


@dp.message_handler(text=["–ù–µ—Ç, —è —Å–æ–±–∞–∫–∞üê∂"])
async def process_command_1(message: types.Message):
    await message.answer("–û—á–µ–Ω—å –∂–∞–ª—å, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –≤—Ä–µ–º—è –∑–∞—Ö–æ–¥–∏((üòî")
    await message.reply(
        "–£–±–∏—Ä–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –≤—ã–±–æ—Ä, –µ—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –≤—Å–µ —Å –Ω–∞—á–∞–ª–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞: /start",
        reply_markup=ReplyKeyboardRemove(),
    )


@dp.message_handler(text=["–î–∞üê±!"])
async def process_command_1(message: types.Message):
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –°–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: –ù–∞–ø–∏—à–∏ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ /cat –∏ –ø–æ—Ä–æ–¥—É –∫–æ—à–∫–∏ —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª,\
 –Ω–∞–ø—Ä–∏–º–µ—Ä: /cat –ü–µ—Ä—Å–∏–¥—Å–∫–∞—è –∫–æ—à–∫–∞ –∏–ª–∏ /cat –ü–µ—Ä—Å–∏–¥—Å–∫–∞—è",
        reply_markup=ReplyKeyboardRemove(),
    )


@dp.message_handler(commands=["cat"])
async def give_info(msg: types.Message):
    url = Cats.search_cat(msg.text[5:])
    if url != -1:
        review = Cats.give_photo_cat(url)
        info, moments = Cats.give_info_cat(url)
        text = ""
        for el in info:
            text = text + "‚óæÔ∏è " + el + "\n"
        text += "\n"
        for el in moments:
            text = text + "üêæ " + el + "\n"
        await msg.answer(
            f"{fmt.hide_link(review)}" + text, parse_mode=types.ParseMode.HTML
        )
        await msg.answer(
            "–•–æ—Ç–∏—Ç–µ –ø–æ–±–æ–ª—å—à–µ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø—Ä–æ –¥–∞–Ω–Ω—É—é –ø–æ—Ä–æ–¥—É –∫–æ—à–∫–∏??",
            reply_markup=greet_kb_1,
        )

        @dp.message_handler(text=["–î–∞!"])
        async def give_url(msg: types.Message):
            await msg.answer(
                "–¢–æ–≥–¥–∞ –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:\t" + url,
                reply_markup=ReplyKeyboardRemove(),
                disable_web_page_preview=True,
            )
            await msg.answer("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤—Å–µ —Å–Ω–∞—á–∞–ª–∞, –Ω–∞–∂–º–∏—Ç–µ: /start")

    else:
        await msg.answer(
            "–£–≤—ã —Ç–∞–∫–æ–π –ø–æ—Ä–æ–¥—ã —è –Ω–µ –∑–Ω–∞—é, –ª–∏–±–æ –í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, —Ç–æ–≥–¥–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!"
        )
        await msg.answer("–ï—Å–ª–∏ –≤—ã –∑–∞–ø—É—Ç–∞–ª–∏—Å—å, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É: /start")


@dp.message_handler(text=["–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ"])
async def process_rm_command(message: types.Message):
    await message.reply(
        "–£–±–∏—Ä–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –≤—ã–±–æ—Ä, –µ—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –≤—Å–µ —Å –Ω–∞—á–∞–ª–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞: /start",
        reply_markup=ReplyKeyboardRemove(),
    )


# run long-polling
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
